{"version":3,"sources":["store/skins/reducer.ts","store/index.ts","components/Header/Header.tsx","services/viewport.ts","components/SkinViewport/SkinViewport.tsx","components/SkinInfo/SkinInfo.tsx","pages/NotFoundPage/NotFoundPage.tsx","pages/SkinPage/SkinPage.tsx","components/SkinListItem/SkinListItem.tsx","store/skins/selectors.ts","pages/SkinsPage/SkinsPage.tsx","App.tsx","store/rootReducer.ts","serviceWorker.ts","index.tsx"],"names":["initialState","reduce","data","skin","id","reducer","history","createBrowserHistory","Header","className","restProps","clsx","extra","href","type","icon","getSkinPath","configureMaterial","material","transparent","alphaTest","SkinViewport","container","useRef","scene","camera","renderer","model","controls","frame","setup","useCallback","current","width","clientWidth","height","clientHeight","THREE","position","z","alpha","setSize","add","OrbitControls","domElement","enablePan","appendChild","load","MTLLoader","getSkinMaterialPath","materials","preload","getAsArray","forEach","objLoader","OBJLoader","setMaterials","getSkinMeshPath","mesh","traverse","node","name","indexOf","rotation","Math","PI","y","normalizeRoot","animate","render","requestAnimationFrame","clean","removeChild","cancelAnimationFrame","useEffect","handleResize","aspect","updateProjectionMatrix","window","addEventListener","removeEventListener","ref","SkinInfo","src","image","alt","withRouter","handleBack","replace","backIcon","onBack","title","Content","Title","Text","SkinPage","match","location","useSelector","state","skins","params","canBack","router","key","goBack","subTitle","React","memo","Item","actions","to","ghost","Meta","avatar","shape","size","description","getSkins","createSelector","Object","values","SkinsPage","dataSource","renderItem","store","createStore","combineReducers","connectRouter","composeWithDevTools","applyMiddleware","routerMiddleware","configureStore","App","path","exact","component","NotFoundPage","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e31ab91c.chunk.js","sourcesContent":["import skins from 'data/skins.json';\nimport { SkinsState } from './types';\n\nexport const initialState: SkinsState = skins.reduce(\n  (data, skin) => ({\n    ...data,\n    [skin.id]: skin\n  }),\n  {}\n);\n\nexport default function reducer(state = initialState) {\n  return state;\n}\n","import { createBrowserHistory } from 'history';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport rootReducer, { AppState } from './rootReducer';\n\nexport const history = createBrowserHistory();\n\nexport type AppStore = ReturnType<typeof configureStore>;\n\nexport default function configureStore(initialState?: AppState) {\n  return createStore(\n    rootReducer(history),\n    initialState,\n    composeWithDevTools(applyMiddleware(routerMiddleware(history)))\n  );\n}\n","import React from 'react';\nimport { PageHeader, Button } from 'antd';\nimport clsx from 'clsx';\n\nimport './header.scss';\n\ntype Props = React.ComponentProps<typeof PageHeader>;\n\nconst Header: React.FC<Props> = ({ className, ...restProps }) => (\n  <PageHeader\n    className={clsx('header', className)}\n    extra={\n      <div className=\"header__extra\">\n        <Button\n          href=\"https://github.com/Kewka/sa-skins\"\n          type=\"dashed\"\n          icon=\"github\"\n        >\n          GitHub\n        </Button>\n      </div>\n    }\n    {...restProps}\n  />\n);\n\nexport default Header;\n","import * as THREE from 'three';\nimport SkinDTO from 'types/SkinDTO';\n\n/**\n * Returns the path to the folder with the skin resources.\n * @param skin Skin.\n */\nexport const getSkinPath = (skin: SkinDTO) => `/skins/${skin.id}`;\n\n/**\n * Returns the path to the skin material.\n * @param skin Skin.\n */\nexport const getSkinMaterialPath = (skin: SkinDTO) =>\n  getSkinPath(skin) + `/${skin.model}.mtl`;\n\n/**\n * Returns the path to the skin mesh.\n * @param skin Skin.\n */\nexport const getSkinMeshPath = (skin: SkinDTO) =>\n  getSkinPath(skin) + `/${skin.model}.obj`;\n\n/**\n * Normalizes the rotation of the root point of the skin mesh.\n * @param mesh Skin mesh.\n */\nexport const normalizeRoot = (mesh: THREE.Object3D) =>\n  mesh.traverse(node => {\n    if (node instanceof THREE.Mesh) {\n      if (node.name.indexOf('Pelvis') === -1) {\n        node.rotation.z = Math.PI / 2;\n        node.rotation.y = Math.PI;\n      } else {\n        node.rotation.y = -Math.PI / 2;\n      }\n    }\n  });\n\n/**\n * Sets skin material properties.\n * @param material Skin material.\n */\nexport const configureMaterial = (material: THREE.Material) => {\n  material.transparent = true;\n  material.alphaTest = 0.3;\n  return material;\n};\n","import React, { useRef, useCallback, useEffect } from 'react';\nimport clsx from 'clsx';\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport SkinDTO from 'types/SkinDTO';\nimport {\n  getSkinMaterialPath,\n  getSkinMeshPath,\n  normalizeRoot,\n  configureMaterial\n} from 'services/viewport';\n\nimport './skin-viewport.scss';\n\ntype Props = {\n  skin: SkinDTO;\n} & React.ComponentProps<'div'>;\n\nconst SkinViewport: React.FC<Props> = ({ skin, className, ...restProps }) => {\n  const container = useRef<HTMLDivElement>(null);\n  const scene = useRef<THREE.Scene>();\n  const camera = useRef<THREE.PerspectiveCamera>();\n  const renderer = useRef<THREE.WebGLRenderer>();\n  const model = useRef<THREE.Object3D>();\n  const controls = useRef<OrbitControls>();\n  const frame = useRef<number>();\n\n  const setup = useCallback(() => {\n    if (container.current) {\n      const { clientWidth: width, clientHeight: height } = container.current;\n      scene.current = new THREE.Scene();\n      camera.current = new THREE.PerspectiveCamera(\n        75,\n        width / height,\n        0.1,\n        1000\n      );\n      camera.current.position.z = 3;\n      renderer.current = new THREE.WebGLRenderer({ alpha: true });\n      renderer.current.setSize(width, height);\n      scene.current.add(new THREE.AmbientLight());\n      controls.current = new OrbitControls(\n        camera.current,\n        renderer.current.domElement\n      );\n      controls.current.enablePan = false;\n\n      container.current.appendChild(renderer.current.domElement);\n    }\n  }, []);\n\n  const load = useCallback(() => {\n    if (!skin) return;\n\n    // Load material and mesh.\n    new MTLLoader().load(getSkinMaterialPath(skin), materials => {\n      materials.preload();\n      materials.getAsArray().forEach(configureMaterial);\n\n      const objLoader = new OBJLoader();\n      objLoader.setMaterials(materials);\n      objLoader.load(getSkinMeshPath(skin), mesh => {\n        normalizeRoot(mesh);\n\n        if (scene.current) {\n          model.current = mesh;\n          scene.current.add(model.current);\n        }\n      });\n    });\n  }, [skin]);\n\n  const animate = useCallback(() => {\n    if (renderer.current && scene.current && camera.current) {\n      renderer.current.render(scene.current, camera.current);\n    }\n\n    frame.current = requestAnimationFrame(animate);\n  }, []);\n\n  const clean = useCallback(() => {\n    if (container.current && renderer.current && frame.current) {\n      container.current.removeChild(renderer.current.domElement);\n      cancelAnimationFrame(frame.current);\n    }\n  }, []);\n\n  useEffect(() => {\n    setup();\n    load();\n    animate();\n    return clean;\n  }, [animate, clean, load, setup]);\n\n  useEffect(() => {\n    function handleResize() {\n      if (container.current && renderer.current && camera.current) {\n        const { clientWidth: width, clientHeight: height } = container.current;\n        renderer.current.setSize(width, height);\n        camera.current.aspect = width / height;\n        camera.current.updateProjectionMatrix();\n      }\n    }\n\n    window.addEventListener('resize', handleResize);\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return (\n    <div\n      className={clsx('skin-viewport', className)}\n      ref={container}\n      {...restProps}\n    />\n  );\n};\n\nexport default SkinViewport;\n","import React from 'react';\nimport clsx from 'clsx';\nimport SkinDTO from 'types/SkinDTO';\n\ntype Props = { skin: SkinDTO } & React.ComponentProps<'div'>;\n\nconst SkinInfo: React.FC<Props> = ({ skin, className, ...restProps }) => (\n  <div className={clsx('skin-info', className)} {...restProps}>\n    <img className=\"skin-info__image\" src={skin.image} alt={skin.model} />\n  </div>\n);\n\nexport default SkinInfo;\n","import React, { useCallback } from 'react';\nimport { Layout, Typography, Icon } from 'antd';\nimport { withRouter, RouteComponentProps } from 'react-router';\n\nimport Header from 'components/Header';\n\nimport './not-found-page.scss';\n\ntype Props = RouteComponentProps;\n\nconst NotFoundPage: React.FC<Props> = ({ history }) => {\n  const handleBack = useCallback(() => history.replace('/'), [history]);\n  return (\n    <Layout className=\"not-found-page\">\n      <Header\n        backIcon={<Icon type=\"home\" />}\n        onBack={handleBack}\n        title=\"Error\"\n        className=\"not-found-page__header\"\n      />\n      <Layout.Content className=\"not-found-page__content\">\n        <Typography.Title className=\"not-found-page__title\" type=\"danger\">\n          404\n        </Typography.Title>\n        <Typography.Text className=\"not-found-page__message\" type=\"danger\">\n          Page not found\n        </Typography.Text>\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nexport default withRouter(NotFoundPage);\n","import React, { useCallback } from 'react';\nimport { Layout } from 'antd';\nimport { RouteComponentProps } from 'react-router';\nimport { useSelector } from 'react-redux';\nimport SkinDTO from 'types/SkinDTO';\nimport Header from 'components/Header';\nimport SkinViewport from 'components/SkinViewport';\nimport SkinInfo from 'components/SkinInfo';\nimport { AppState } from 'store/rootReducer';\nimport NotFoundPage from 'pages/NotFoundPage';\n\nimport './skin-page.scss';\n\ntype Props = RouteComponentProps<{ id: string }>;\n\nconst SkinPage: React.FC<Props> = ({ history, match, location }) => {\n  const skin = useSelector<AppState, SkinDTO | undefined>(\n    state => state.skins[match.params.id]\n  );\n\n  const canBack = useSelector<AppState, boolean>(\n    state => !!state.router.location.key\n  );\n\n  const handleBack = useCallback(\n    () => (canBack ? history.goBack() : history.replace('/')),\n    [canBack, history]\n  );\n\n  return skin ? (\n    <Layout className=\"skin-page\">\n      <Header\n        onBack={handleBack}\n        title={`Skin ID: ${skin.id}`}\n        subTitle={skin.model}\n        className=\"skin-page__header\"\n      />\n      <Layout.Content className=\"skin-page__content\">\n        <SkinViewport className=\"skin-page__viewport\" skin={skin} />\n        <SkinInfo className=\"skin-page__info\" skin={skin} />\n      </Layout.Content>\n    </Layout>\n  ) : (\n    <NotFoundPage />\n  );\n};\n\nexport default SkinPage;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { List, Avatar, Button } from 'antd';\nimport { Link } from 'react-router-dom';\n\nimport SkinDTO from 'types/SkinDTO';\n\nimport './skin-list-item.scss';\n\ntype Props = {\n  skin: SkinDTO;\n} & React.ComponentProps<typeof List.Item>;\n\nconst SkinListItem: React.FC<Props> = ({ skin, className, ...restProps }) => (\n  <List.Item\n    actions={[\n      <Link to={`/skins/${skin.id}`}>\n        <Button type=\"primary\" ghost>\n          Open\n        </Button>\n      </Link>\n    ]}\n    className={clsx('skin-list-item', className)}\n    {...restProps}\n  >\n    <List.Item.Meta\n      avatar={\n        <Avatar\n          shape=\"square\"\n          size=\"large\"\n          className=\"skin-list-item__avatar\"\n          src={skin.image}\n        />\n      }\n      title={`ID: ${skin.id}`}\n      description={`Model: ${skin.model}`}\n    />\n  </List.Item>\n);\n\nexport default React.memo(SkinListItem);\n","import { createSelector } from 'reselect';\nimport { AppState } from 'store/rootReducer';\nimport SkinDTO from 'types/SkinDTO';\nimport { SkinsState } from './types';\n\n/**\n * Selects an array of skins.\n */\nexport const getSkins = createSelector<AppState, SkinsState, SkinDTO[]>(\n  state => state.skins,\n  skins => Object.values(skins) as SkinDTO[]\n);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { List, Layout } from 'antd';\n\nimport Header from 'components/Header';\nimport SkinListItem from 'components/SkinListItem';\n\nimport { getSkins } from 'store/skins/selectors';\n\nimport './skins-page.scss';\n\nconst SkinsPage: React.FC = () => {\n  const skins = useSelector(getSkins);\n\n  return (\n    <Layout className=\"skins-page\">\n      <Header className=\"skins-page__header\" title=\"Skins\" />\n      <Layout.Content className=\"skins-page__content\">\n        <List\n          dataSource={skins}\n          renderItem={skin => <SkinListItem key={skin.id} skin={skin} />}\n        />\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nexport default SkinsPage;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport configureStore, { history } from 'store';\n\nimport SkinPage from 'pages/SkinPage';\nimport SkinsPage from 'pages/SkinsPage';\nimport NotFoundPage from 'pages/NotFoundPage';\n\nconst store = configureStore();\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <Switch>\n        <Route path=\"/(skins)?\" exact component={SkinsPage} />\n        <Route path=\"/skins/:id(\\d+)\" exact component={SkinPage} />\n        <Route component={NotFoundPage} />\n      </Switch>\n    </ConnectedRouter>\n  </Provider>\n);\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { connectRouter, RouterState } from 'connected-react-router';\nimport { History } from 'history';\nimport skins from './skins/reducer';\nimport { SkinsState } from './skins/types';\n\nexport type AppState = {\n  router: RouterState;\n  skins: SkinsState;\n};\n\nexport default function rootReducer(history: History) {\n  return combineReducers<AppState>({\n    router: connectRouter(history),\n    skins\n  });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/styles/global.scss';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}